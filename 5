#             ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ
#             ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà
#              ¬© Copyright 2022
#           https://t.me/hikariatama
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta pic: https://static.hikari.gay/aniquotes_icon.png
# meta banner: https://mods.hikariatama.ru/badges/aniquotes.jpg
# meta developer: @Mmazzerratti
# scope: hikka_only
# scope: hikka_min 1.2.10

import asyncio

import random

from telethon.tl.types import Message

from .. import loader, utils


@loader.tds
class AnimatedQuotesMod(loader.Module):
    """Simple module to create animated stickers via bot"""

    strings = {
        "name": "AnimatedQuotes",
        "no_text": (
            "<emoji document_id=5312526098750252863>üö´</emoji> <b>Provide a text to"
            " create sticker with</b>"
        ),
        "processing": (
            "<emoji document_id=5451646226975955576>‚åõÔ∏è</emoji> <b>Processing...</b>"
        ),
    }

    strings_ru = {
        "no_text": (
            "<emoji document_id=5312526098750252863>üö´</emoji> <b>–£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –¥–ª—è"
            " —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞</b>"
        ),
        "processing": (
            "<emoji document_id=5451646226975955576>‚åõÔ∏è</emoji> <b>–û–±—Ä–∞–±–æ—Ç–∫–∞...</b>"
        ),
        "_cmd_doc_aniq": "<text> - –°–æ–∑–¥–∞—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä",
        "_cls_doc": "–ü—Ä–æ—Å—Ç–µ–Ω—å–∫–∏–π –º–æ–¥—É–ª—å, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã",
    }

    async def aniqcmd(self, message: Message):
        """<text> - Create animated quote"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings("no_text"))
            return

        retries = 3  # Number of retries before giving up
        for attempt in range(retries):
            try:
                message_processing = await utils.answer(message, self.strings("processing"))
                query = await self._client.inline_query("@QuotAfBot", args)
                await message_processing.delete()  # Delete the "processing" message

                if not query:
                    await utils.answer(message, self.strings("no_results"))
                    return

                # Check if there are at least two results
                if len(query) >= 2:
                    # Choose either the second (index 1) or third (index 2) result
                    selected_result = random.choice([query[1], query[2]])
                else:
                    # If there's only one result, use it
                    selected_result = query[0]

                await message.respond(file=selected_result.document)
                return

            except Exception as e:
                error_msg = str(e)
                if "The message cannot be empty unless a file is provided" not in error_msg:
                    await utils.answer(message, error_msg)
                    return

                # Wait for a short time before retrying
                await asyncio.sleep(1)

        # If all retries fail, respond with an error message
        await utils.answer(message, "Failed to create animated quote. Please try again later.")

        if message.out:
            await message.delete()
