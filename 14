# meta developer: @Mmazzerratti
# meta developer: @MajorOfPain

from telethon.tl.types import Message
from .. import loader, utils
from random import randint
import re
import asyncio


@loader.tds
class AnimatedQuotes(loader.Module):
    strings_ru = {
        "name": "–ú–æ–¥—É–ª—å [AnimatedQuotes]",
        "no_text": (
            "üö´ <b>–£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞</b>"
        ),
        "processing": (
            "‚åõÔ∏è <b>–î—É–º–∞—é...</b>"
        ),
        "invind": (
            "üö´ <b>–£–∫–∞–∂–∏—Ç–µ –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞</b>"
        ),
        "erroeaq": (
            "<b>–û—à–∏–±–∫–∞</b>"
        ),
        "_cmd_doc_aniq": "<index> <text> - –°–æ–∑–¥–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä",
        "_cls_doc": "–ú–æ–¥—É–ª—å, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã",
    }

    strings_en = {
        "name": "Module [AnimatedQuotes]",
        "no_text": (
            "üö´ <b>Specify the text for creating a sticker</b>"
        ),
        "processing": (
            "‚åõÔ∏è <b>Think...</b>"
        ),
        "invind": (
            "üö´ <b>Specify the index to create the sticker</b>"
        ),
        "erroeaq": (
            "<b>Error</b>"
        ),
        "_cmd_doc_aniq": "<index> <text> - Create a random animated sticker",
        "_cls_doc": "A module that creates animated stickers",
    }

    async def generatefoto(self, message: Message, image_index: int, args: str):
        if not args:
            await utils.answer(message, self.strings["no_text"])
            return
        if image_index < 0 or image_index > 4:
            await utils.answer(message, self.strings["invind"])
            return
        processing_message = await utils.answer(message, self.strings["processing"])
        max_retries = 5
        retry_delay = 5
        success = False
        for _ in range(max_retries):
            try:
                query = await self._client.inline_query("@QuotAfBot", args)
                if query and len(query) >= image_index + 1:
                    await processing_message.respond(file=query[image_index].document)
                    success = True
                    break
            except Exception:
                await asyncio.sleep(retry_delay)
                continue
        if not success:
            await utils.answer(message, self.strings["erroeaq"])

    async def aniqcmd(self, message: Message):
        args = utils.get_args_raw(message).strip()
        if args:
            match = re.match(r"\d+", args)
            if match:
                image_index = int(match.group())
                text = args[match.end():].strip()
            else:
                image_index = randint(0, 4)
                text = args
        else:
            image_index = randint(0, 4)
            text = ""
        await self.generatefoto(message, image_index, text)

    async def aniq1cmd(self, message: Message):
        args = utils.get_args_raw(message)
        await self.generatefoto(message, 0, args)

    async def aniq2cmd(self, message: Message):
        args = utils.get_args_raw(message)
        await self.generatefoto(message, 1, args)

    async def aniq3cmd(self, message: Message):
        args = utils.get_args_raw(message)
        await self.generatefoto(message, 2, args)

    async def aniq4cmd(self, message: Message):
        args = utils.get_args_raw(message)
        await self.generatefoto(message, 3, args)

    async def aniq5cmd(self, message: Message):
        args = utils.get_args_raw(message)
        await self.generatefoto(message, 4, args)
