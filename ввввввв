# meta developer: @Mmazzerratti

from telethon.tl.types import Message
from .. import loader, utils
from random import randint
import asyncio


@loader.tds
class AnimatedQuotes(loader.Module):
    strings = {
        "name": "Module [AnimatedQuotes]",
        "no_text": (
            "<emoji document_id=5312526098750252863>üö´</emoji> <b>–£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –¥–ª—è"
            " —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞</b>"
        ),
        "processing": (
            "<emoji document_id=5451646226975955576>‚åõÔ∏è</emoji> <b>–î—É–º–∞—é...</b>"
        ),
        "erroeaq": (
            "‚ö†Ô∏è Failed to fetch animated quote. Please try again later."
        ),
    }

    strings_ru = {
        "no_text": (
            "<emoji document_id=5312526098750252863>üö´</emoji> <b>–£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –¥–ª—è"
            " —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞</b>"
        ),
        "processing": (
            "<emoji document_id=5451646226975955576>‚åõÔ∏è</emoji> <b>–î—É–º–∞—é...</b>"
        ),
        "erroeaq": (
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–∏—Ç–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
        ),
        "_cmd_doc_aniq": "<text> - –°–æ–∑–¥–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä",
        "_cmd_doc_aniq1": "<text> - –°–æ–∑–¥–∞—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä —Å —Ä–∞–º–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è",
        "_cmd_doc_aniq2": "<text> - –°–æ–∑–¥–∞—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –¥–µ–≤–æ—á–∫–∏ —Å –ª–∏—Å—Ç–æ—á–∫–æ–º",
        "_cmd_doc_aniq3": "<text> - –°–æ–∑–¥–∞—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –¥–µ–≤–æ—á–∫–∏ —Å —Ç–∞–±–ª–∏—á–∫–æ–π",
        "_cmd_doc_aniq4": "<text> - –°–æ–∑–¥–∞—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –∫–æ—Ç–∏–∫–∞–∑ —Å —Ä–∞–º–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è",
        "_cmd_doc_aniq5": "<text> - –°–æ–∑–¥–∞—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –∫–æ—Ç–∏–∫–∞–∑ —Å —Ä–∞–º–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è",
        "_cmd_doc_aniq6": "<text>–∑ - –°–æ–∑–¥–∞—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –∫–æ—Ç–∏–∫–∞–∑ —Å —Ä–∞–º–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è",
        "_cmd_doc_aniq7": "<text>–∑ - –°–æ–∑–¥–∞—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –∫–æ—Ç–∏–∫–∞–∑ —Å —Ä–∞–º–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è",
    }

    strings_en = {
        "no_text": (
            "<emoji document_id=5312526098750252863>üö´</emoji> <b>Specify the text for"
            " creating a sticker</b>"
        ),
        "processing": (
            "<emoji document_id=5451646226975955576>‚åõÔ∏è</emoji> <b>Think...</b>"
        ),
        "erroeaq": (
            "‚ö†Ô∏è Failed to fetch animated quote. Please try again later."
        ),
        "_cmd_doc_aniq": "<text> - Create a random animated sticker",
        "_cmd_doc_aniq1": "<text> - Create an animated sticker with a message frame",
        "_cmd_doc_aniq2": "<text> - Create an animated sticker of a girl with a leaflet",
        "_cmd_doc_aniq3": "<text> - Create an animated sticker of a girl with a sign",
        "_cmd_doc_aniq4": "<text> - Create an animated kitty sticker with a message frame",
        "_cls_doc": "A module that creates animated stickers",
    }


    async def generatefoto(self, message: Message, image_index: int):
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["no_text"])
            return
        message = await utils.answer(message, self.strings["processing"])
        max_retries = 10
        retry_delay = 10
        success = False
        for _ in range(max_retries):
            try:
                query = await self._client.inline_query("@QuotAfBot", args)
                if query and len(query) >= image_index + 1:
                    await message.respond(file=query[image_index].document)
                    success = True
                    break
            except Exception:
                await asyncio.sleep(retry_delay)
                continue
        if not success:
            await utils.answer(message, self.strings["erroeaq"])
        if message.out:
            await message.delete()


    async def aniqcmd(self, message: Message):
        random_index = randint(0, 7)
        await self.generatefoto(message, random_index)


    async def aniq1cmd(self, message: Message):
        await self.generatefoto(message, 0)


    async def aniq2cmd(self, message: Message):
        await self.generatefoto(message, 1)


    async def aniq3cmd(self, message: Message):
        await self.generatefoto(message, 2)


    async def aniq4cmd(self, message: Message):
        await self.generatefoto(message, 3)


    async def aniq5cmd(self, message: Message):
        await self.generatefoto(message, 4)


    async def aniq6cmd(self, message: Message):
        await self.generatefoto(message, 5)


    async def aniq7cmd(self, message: Message):
        await self.generatefoto(message, 6)


    async def aniq8cmd(self, message: Message):
        await self.generatefoto(message, 7)
