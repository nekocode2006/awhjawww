# meta developer: @Mmazzerratti

from telethon.tl.types import Message
from .. import loader, utils
from random import randint
import asyncio

@loader.tds
class ModuleAnimatedQuotes(loader.Module):
    strings = {
        "name": {
            "ru": "–ú–æ–¥—É–ª—å [AnimatedQuotes]",
            "en": "Module [AnimatedQuotes]",
        },
        "no_text": {
            "ru": "üö´ <b>–£–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞</b>",
            "en": "üö´ <b>Specify the text for creating a sticker</b>",
        },
        "processing": {
            "ru": "‚åõÔ∏è <b>–î—É–º–∞—é...</b>",
            "en": "‚åõÔ∏è <b>Think...</b>",
        },
        "error": {
            "ru": "<b>–û—à–∏–±–∫–∞</b>",
            "en": "<b>Error</b>",
        },
        "_cmd_doc_aniq": {
            "ru": "<index> <text> - –°–æ–∑–¥–∞—Ç—å —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä",
            "en": "<index> <text> - Create a random animated sticker",
        },
        "_cls_doc": {
            "ru": "–ú–æ–¥—É–ª—å, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã",
            "en": "A module that creates animated stickers",
        },
    }

    async def retry_inline_query(self, query_text, max_retries=5, retry_delay=5):
        for _ in range(max_retries):
            try:
                return await self._client.inline_query("@QuotAfBot", query_text)
            except Exception:
                await asyncio.sleep(retry_delay)
                continue
        return None

    async def generatefoto(self, message: Message, image_index: int, args: str):
        args = args.strip()

        if not args:
            await message.edit(self.strings["no_text"])
            return

        processing_message = await message.edit(self.strings["processing"])

        query = await self.retry_inline_query(args)
        if query and len(query) >= image_index + 1:
            await processing_message.respond(file=query[image_index].document)
        else:
            await message.edit(self.strings["error"])

        if message.out:
            await message.delete()

    async def aniqcmd(self, message: Message):
        args = utils.get_args_raw(message).strip()
        image_index = 0
        text = ""

        index_text_dict = {
            '1': 0,
            '2': 1,
            '3': 2,
            '4': 3,
            '5': 4,
        }

        if args and args[0].isdigit():
            index, text = args.split(maxsplit=1)
            image_index = index_text_dict.get(index, 0)

        await self.generatefoto(message, image_index, text)
